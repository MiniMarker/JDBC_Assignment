import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.*;

public class InputHandler {

	private String text;
	private StringBuilder stringBuilder;
	private String result;

	private String line;
	private String splitBy = ",";

	public InputHandler() {

	}

	/**
	 * Add data to Subject table form file located in the target/textfile folder generated by maven
	 * prints numbers of rows created in terminal
	 *
	 * @param connection a MySQLDataSource
	 */
	public void addSubjectDataFromFile(Connection connection) {

		String filepath = "target/textfiles/subjects.csv";

		try (Connection con = connection;
		     BufferedReader br = new BufferedReader(new FileReader(filepath));
		     PreparedStatement prepSubjectStmt = con.prepareStatement("INSERT INTO Subject VALUES (?,?,?,?)")) {

			int count = 0;

			while ((line = br.readLine()) != null) {

				// Split by comma (,)
				String[] subjects = line.split(splitBy);

				prepSubjectStmt.setString(1, subjects[0]);
				prepSubjectStmt.setString(2, subjects[1]);
				prepSubjectStmt.setDouble(3, Double.parseDouble(subjects[2]));
				prepSubjectStmt.setInt(4, Integer.parseInt(subjects[3]));

				prepSubjectStmt.executeUpdate();

				count++;
			}

			System.out.println(count + " Rows created in table 'Subject'");

		} catch (SQLException sqle) {
			System.out.println("SQL ERROR! " + sqle.getMessage());
		} catch (IOException ioex) {
			System.out.println("IO ERROR! " + ioex.getMessage());
		}
	}

	/**
	 * Add data to Teacher table form file located in the target/textfile folder generated by maven
	 * prints numbers of rows created in terminal
	 *
	 * @param connection a MySQLDataSource
	 */
	public void addTeacherDataFromFile(Connection connection) {

		String filepath = "target/textfiles/teachers.csv";

		try (Connection con = connection;
		     BufferedReader br = new BufferedReader(new FileReader(filepath));
		     PreparedStatement prepTeacherStmt = con.prepareStatement("INSERT INTO Teacher VALUES (?,?,?,?)")) {

			int count = 0;

			while ((line = br.readLine()) != null) {

				// Split by comma (,)
				String[] teachers = line.split(splitBy);

				prepTeacherStmt.setInt(1, Integer.parseInt(teachers[0]));
				prepTeacherStmt.setString(2, teachers[1]);
				prepTeacherStmt.setString(3, teachers[2]);
				prepTeacherStmt.setString(4, teachers[3]);

				prepTeacherStmt.executeUpdate();
				count++;
			}

			System.out.println(count + " Rows created in table 'Teacher'");

		} catch (SQLException sqle) {
			System.out.println("SQL ERROR! " + sqle.getMessage());
		} catch (IOException ioex) {
			System.out.println("IO ERROR! " + ioex.getMessage());
		}
	}

	/**
	 * Print one subject defined by user input on subject.code
	 *
	 * @param connection a MySQLDataSource
	 * @return one ResultSet defined by a query based on subject.code
	 */
	public String printSingleSubject(Connection connection, String code) {

		try (Connection con = connection;
		     PreparedStatement prepSingeSubjectStmt = con.prepareStatement("SELECT * FROM Subject WHERE code = ?" + "\n")) {

			prepSingeSubjectStmt.setString(1, code);

			ResultSet rs = prepSingeSubjectStmt.executeQuery();

			while (rs.next()) {
				text = String.format("Emnekode: %-20s Emnenavn: %-35s Varlighet: %-20.2f Antall påmeldte: %-10d",
						rs.getString(1), rs.getString(2), rs.getDouble(3),rs.getInt(4));
			}

			if (text == null){
				return "Kunne ikke finne rad i tabellen med fagkode = " + code;
			}

		} catch (SQLException sqle) {
			System.out.println("SQL ERROR! " + sqle.getMessage());
		}
		return text;
	}

	/**
	 * Print all subjects in database
	 *
	 * @param connection a MySQLDataSource
	 * @return Strings of all rows in the db-table built by using a StringBuilder
	 */
	public String printAllSubjects(Connection connection) {

		try (Connection con = connection;
		     Statement stmt = con.createStatement()) {

			ResultSet rs = stmt.executeQuery("SELECT * FROM Subject");

			stringBuilder = new StringBuilder();

			while (rs.next()) {

				String text = String.format("Emnekode: %-20s Emnenavn: %-35s Varlighet: %-20.2f Antall påmeldte: %-10d",
						rs.getString(1), rs.getString(2), rs.getDouble(3),rs.getInt(4));

				stringBuilder.append(text + "\n");
			}

			result = stringBuilder.toString();

		} catch (SQLException sqle) {
			System.out.println("SQL ERROR! " + sqle.getMessage());
		}
		return result;
	}

	/**
	 * Print all teachers in database
	 *
	 * @param connection a MySQLDataSource
	 * @return Strings of all rows in the db-table built by using a StringBuilder
	 */
	public String printAllTeachers(Connection connection) {

		try (Connection con = connection;
		     Statement stmt = con.createStatement()) {

			ResultSet rs = stmt
					.executeQuery("SELECT * FROM Teacher");

			stringBuilder = new StringBuilder();

			while (rs.next()) {

				String text = String.format("Id: %-10d Navn: %-20s Ikke ledig: %-10s Kontakt: %-20s",
						rs.getInt(1), rs.getString(2), rs.getString(3),rs.getString(4));

				stringBuilder.append(text + "\n");
			}

			result = stringBuilder.toString();

		} catch (SQLException sqle) {
			System.out.println("SQL ERROR! " + sqle.getMessage());
		}
		return result;
	}

	/**
	 * Print all items in database by using the two other print functions
	 */
	public void printAllData(Connection connection) {

		try (Connection con = connection) {

			System.out.println("\n------------------------------------------- SUBJECTS --------------------------------------------");
			System.out.println(printAllSubjects(con));
			System.out.println("\n------------------------------------------- TEACHERS --------------------------------------------");
			System.out.println(printAllTeachers(con));

		} catch (SQLException sqle){
			sqle.getMessage();
		}

	}
}
